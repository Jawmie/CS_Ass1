/**
 * Client Server Programming Ass1 - Streams
 * Jamie Chambers
 * Created by g00292525 on 17/09/2015.
 */

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;


public class myMain extends JPanel{
    private JButton jcomp1;
    private JButton jcomp2;
    private JButton jcomp3;
    private JButton jcomp4;
    private JTextArea jcomp5;
    private JTextArea jcomp6;
    private JTextArea jcomp7;
    private JTextArea jcomp8;

    //make the file available to all the buttons ActionListeners
    public static File textFile;

    //put borders on textAreas to make them more noticeable
    Border loweredEtched = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);

    //Set up GUI and FileChooser
    public myMain() {
        //construct components
        //Buttons for file manipulation
        jcomp1 = new JButton("Load");
        jcomp2 = new JButton("Reverse");
        jcomp3 = new JButton("Reverse Pair");
        jcomp4 = new JButton("Count");

        //Load File into the GUI
        jcomp1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.showOpenDialog(null);
                textFile = fileChooser.getSelectedFile();

                try{
                    jcomp5.setText(null);
                    //Reads the file from the file chooser
                    //Breakpoint here
                    BufferedReader br = new BufferedReader(new FileReader(textFile));
                    //reads the lines of the text file
                    String fileLines = br.readLine();
                    //will be inserted into the textArea
                    String line = "";

                    while(fileLines != null){
                        //make string filled with words from file
                        line = line + fileLines;
                        //move the fileLines string to the next line
                        fileLines = br.readLine();
                        //break out once the readLine finds a null
                    }
                    //set the text of the file in the textArea
                    jcomp5.setText(line);

                    br.close();
                    jcomp5.requestFocus(); //set the textArea active
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        //Reverse the words in the file
        jcomp2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try{
                    jcomp6.setText(null);

                    //Reads the file from the file chooser
                    BufferedReader br = new BufferedReader(new FileReader(textFile));


                    //reads line by line and are now strings
                    String fileLine = br.readLine();

                    //while there is still text in the file
                    while(fileLine != null){
                        String[] werds = fileLine.split(" "); //split the string on a space

                        for(int i = werds.length - 1; i >= 0; i--){
                            jcomp6.append(werds[i] + " ");
                        }
                        fileLine = br.readLine();
                    }

                    br.close();
                    jcomp6.requestFocus();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });
        //FIX: Array out of bounds error
        //Reverse a pair of words
        jcomp3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try{
                    jcomp7.setText(null);
                    //Reads the file from the file chooser
                    //Breakpoint here
                    BufferedReader br = new BufferedReader(new FileReader(textFile));
                    //reads line by line and are now strings
                    String fileLine = br.readLine();

                    //while there is still text in the file
                    while(fileLine != null){
                        String[] fileLines = fileLine.split("\\.");
                        for(int x = 0; x < fileLines.length; x++) {
                            String[] fileWerds = fileLines[x].split(" "); //split the string on a space
                            //have it always less than the length
                            for (int i = 0; i < fileWerds.length; i++) {
                                //check for pairs of words as well as checking you are at the end of the line
                                if (i % 2 == 0 && i < fileWerds.length) {
                                    jcomp7.append(fileWerds[i + 1] + " ");
                                    jcomp7.append(fileWerds[i] + " ");
                                }
                            }
                        }
                        fileLine = br.readLine();
                    }
                    br.close();
                    jcomp7.requestFocus();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        //Perform a word count on all the words
        jcomp4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                JFileChooser fileChooser = new JFileChooser();
                int returnValue = fileChooser.showOpenDialog(null);

                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    System.out.println(selectedFile.getName());
                }
            }
        });

        jcomp5 = new JTextArea (5, 5);
        jcomp6 = new JTextArea (5, 5);
        jcomp7 = new JTextArea (5, 5);
        jcomp8 = new JTextArea (5, 5);
        //Set line wrap on text area
        jcomp5.setLineWrap(true);
        jcomp6.setLineWrap(true);
        jcomp7.setLineWrap(true);
        jcomp8.setLineWrap(true);

        //create panel to hold buttons
        JPanel panel = new JPanel();
        panel.add(jcomp1);
        panel.add(jcomp2);
        panel.add(jcomp3);
        panel.add(jcomp4);

        add(panel);

        //adjust size and set layout
        setPreferredSize(new Dimension(670, 550));
        setLayout(null);

        //add components
        add (jcomp1);
        add (jcomp2);
        add (jcomp3);
        add (jcomp4);
        add (jcomp5);
        add (jcomp6);
        add (jcomp7);
        add (jcomp8);

        //set component bounds (only needed by Absolute Positioning)
        jcomp1.setBounds (45, 45, 115, 20);
        jcomp2.setBounds (210, 45, 115, 20);
        jcomp3.setBounds (365, 45, 115, 20);
        jcomp4.setBounds (520, 45, 115, 20);
        jcomp5.setBounds (35, 75, 135, 425);
        jcomp6.setBounds (200, 75, 135, 425);
        jcomp7.setBounds (355, 75, 135, 425);
        jcomp8.setBounds (510, 75, 135, 425);

        jcomp5.setBorder(loweredEtched);
        jcomp6.setBorder(loweredEtched);
        jcomp7.setBorder(loweredEtched);
        jcomp8.setBorder(loweredEtched);
    }

    //run the whole thing
    public static void main (String[] args) {
        JFrame frame = new JFrame ("MyPanel");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add (new myMain());
        frame.pack();
        frame.setVisible (true);
    }
}



