/**
 * Client Server Programming Ass1 - Streams
 * Jamie Chambers
 * Created by g00292525 on 17/09/2015.
 */

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;


public class myMain extends JPanel{
    private JButton loadButt;
    private JButton reverseButt;
    private JButton revPairButt;
    private JButton countButt;
    private JTextArea loadText;
    private JTextArea reverseText;
    private JTextArea revPairText;
    private JTextArea countText;

    //make the file available to all the buttons ActionListeners
    public static File textFile;

    //put borders on textAreas to make them more noticeable
    Border loweredEtched = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);

    //Set up GUI and FileChooser
    public myMain() {
        //construct components
        //Buttons for file manipulation
        loadButt = new JButton("Load");
        reverseButt = new JButton("Reverse");
        revPairButt = new JButton("Reverse Pair");
        countButt = new JButton("Word Count");

        //Load File into the GUI
        loadButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.showOpenDialog(null);
                textFile = fileChooser.getSelectedFile();

                try{
                    loadText.setText(null);
                    //Reads the file from the file chooser
                    //Breakpoint here
                    BufferedReader br = new BufferedReader(new FileReader(textFile));
                    //reads the lines of the text file
                    String fileLines = br.readLine();
                    //will be inserted into the textArea
                    String line = "";

                    while(fileLines != null){
                        //make string filled with words from file
                        line = line + fileLines;
                        //move the fileLines string to the next line
                        fileLines = br.readLine();
                        //break out once the readLine finds a null
                    }
                    //set the text of the file in the textArea
                    loadText.setText(line);

                    br.close();
                    loadText.requestFocus(); //set the textArea active
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        //Reverse the words in the file
        reverseButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try{
                    reverseText.setText(null);

                    //Reads the file from the file chooser
                    BufferedReader br = new BufferedReader(new FileReader(textFile));


                    //reads line by line and are now strings
                    String fileLine = br.readLine();

                    //while there is still text in the file
                    while(fileLine != null){
                        String[] werds = fileLine.split(" "); //split the string on a space

                        for(int i = werds.length - 1; i >= 0; i--){
                            reverseText.append(werds[i] + " ");
                        }
                        fileLine = br.readLine();
                    }

                    br.close();
                    reverseText.requestFocus();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        //Reverse a pair of words
        revPairButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try{
                    revPairText.setText(null);
                    //Reads the file from the file chooser
                    //Breakpoint here
                    BufferedReader br = new BufferedReader(new FileReader(textFile));
                    //reads line by line and are now strings
                    String fileLine = br.readLine();

                    //while there is still text in the file
                    while(fileLine != null){
                        String[] fileLines = fileLine.split("\\.");
                        for(int x = 0; x < fileLines.length; x++) {
                            String[] fileWerds = fileLines[x].split(" "); //split the string on a space
                            //have it always less than the length
                            for (int i = 0; i < fileWerds.length; i++) {
                                //check for pairs of words as well as checking you are at the end of the line
                                if (i % 2 == 0 && i < fileWerds.length - 1) {
                                    revPairText.append(fileWerds[i + 1] + " ");
                                    revPairText.append(fileWerds[i] + " ");
                                }
                            }
                        }
                        fileLine = br.readLine();
                    }
                    br.close();
                    revPairText.requestFocus();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        });

        //Perform a word count on all the words
        countButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try
                {
                    countText.setText(null);
                    Map<String, Integer> wordCount = new HashMap<>();
                    BufferedReader br = new BufferedReader(new FileReader(textFile));
                    String currentLine = br.readLine();

                    while (currentLine != null) {
                        //Make everything lower case to make grouping words easier
                        currentLine = currentLine.replaceAll("[^a-z/A-Z ]", "").toLowerCase();
                        //Split words by the spaces between them and put them into an array
                        String[] words = currentLine.split(" ");
                        for (int i = 0; i < words.length; i++) {
                            if (wordCount.containsKey(words[i]))
                                //If the word already exists in the HashMap the increase the value of
                                //the one in the HashMap
                                wordCount.put(words[i], wordCount.get(words[i]) + 1);
                            else
                                //If it is a new word, just insert it as a key, with a value 1
                                wordCount.put(words[i], 1);
                        }
                        //Moves the file onto the next line
                        currentLine = br.readLine();
                    }

                    //Goes through HashMap and inserts the values into the textArea
                    for(Map.Entry<String, Integer> word : wordCount.entrySet())
                    {
                        String key = word.getKey().toString();
                        Integer value = word.getValue();
                        countText.append(key + " " + value + "\n");
                    }

                    br.close();
                    countText.requestFocus();
                }
                catch(Exception ee)
                {
                    ee.printStackTrace();
                }
            }
        });

        loadText = new JTextArea (5, 5);
        reverseText = new JTextArea (5, 5);
        revPairText = new JTextArea (5, 5);
        countText = new JTextArea (5, 5);
        //Set line wrap on text area
        loadText.setLineWrap(true);
        reverseText.setLineWrap(true);
        revPairText.setLineWrap(true);
        countText.setLineWrap(true);

        //create panel to hold buttons
        JPanel panel = new JPanel();
        panel.add(loadButt);
        panel.add(reverseButt);
        panel.add(revPairButt);
        panel.add(countButt);

        add(panel);

        //adjust size and set layout
        setPreferredSize(new Dimension(670, 550));
        setLayout(null);

        //add components
        add (loadButt);
        add (reverseButt);
        add (revPairButt);
        add (countButt);
        add (loadText);
        add (reverseText);
        add (revPairText);
        add (countText);

        //set component bounds (only needed by Absolute Positioning)
        loadButt.setBounds (45, 45, 115, 20);
        reverseButt.setBounds (210, 45, 115, 20);
        revPairButt.setBounds (365, 45, 115, 20);
        countButt.setBounds (520, 45, 115, 20);
        loadText.setBounds (35, 75, 135, 425);
        reverseText.setBounds (200, 75, 135, 425);
        revPairText.setBounds (355, 75, 135, 425);
        countText.setBounds (510, 75, 135, 425);

        loadText.setBorder(loweredEtched);
        reverseText.setBorder(loweredEtched);
        revPairText.setBorder(loweredEtched);
        countText.setBorder(loweredEtched);
    }

    //run the whole thing
    public static void main (String[] args) {
        JFrame frame = new JFrame ("MyStreamPanel");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add (new myMain());
        frame.pack();
        frame.setVisible (true);
    }
}



